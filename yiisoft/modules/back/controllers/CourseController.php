<?php
/**
 * Created by PhpStorm.
 * User: SZL4ZSY
 * Date: 3/15/2018
 * Time: 3:00 PM
 */
namespace back\controllers;

use app\common\Common;
use app\common\JwtAuth;
use app\models\VproCourses;
use app\models\VproCoursesCover;
use app\models\VproCoursesContent;
use app\models\VproCoursesLessonList;
use yii\db\Exception;

class CourseController extends BackBaseController
{
    public $modelClass = 'back\models\VproAuth';
    function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => JwtAuth::className(),
            /*
             *因为此post请求的 content-type不是one of the “application/x-www-form-urlencoded, multipart/form-data, or text/plain”, 所以Preflighted requests被发起。
             * “preflighted” requests first send an HTTP OPTIONS request header to the resource on the other domain, in order to determine whether the actual request is safe to send.
             * 然后得到服务器response许可之后，再发起其post请求。
             */
            'except' => ['create', 'options', 'index', 'load-course-detail']
        ];
        return $behaviors;
    }
    public function init(){
        return parent::init();
    }
    public function actions()
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['index'], $actions['create']);
        return $actions;
    }
    public function actionCreate() {
        $course_title = $this->request->post('course_title', false);
        $course_content_data = $this->request->post('course_content', '');
        $course_nav_id = $this->request->post('course_nav_id', false);
        $course_author = $this->request->post('course_author', false);
        $course_author = 3;
        $course_price = $this->request->post('course_price', false);
        if (!$course_title || !$course_nav_id || !$course_author) return $this->returnInfo('course key info missing', 'INFO_MISS');
        if (Common::checkCourseString($course_title)) return $this->returnInfo('string format does not meet the requirements', 'FORMAT_MISMATCH');
        $transaction=$this->db->beginTransaction();
        try {
            $course = new VproCourses();
            if ($course_price) {
                if ($course_price['discount_price'] !== '-1.00') {
                    $course->course_discount_price = $course_price['discount_price'];
                }
                $course->course_price = $course_price['price'];
            }
            $course->course_id = Common::genCourseId();
            $course->course_author = $course_author;
            $course->course_title = $course_title;
            $course->course_pid = $course_nav_id;
            $course->course_time = time();
            if ($course->save()) {
                $course_content = new VproCoursesContent();
                $course_content->course_content = $course_content_data;
                $course_content->course_id = $course->course_id;
                $course_content->save();
            }
            $transaction->commit();
            return $this->returnInfo(['course_id' => $course->course_id, 'course_content_id' => $course_content->detail_id]);
        } catch(Exception $e) {
            $transaction->rollback();
            return $this->returnInfo('data insert to datebase error, contact with programmer', 'DATEBASE_INSERT_ERROR');
        }
    }
    public function actionIndex()
    {
        $author = $this->request->get('author', 3);
        $currentPage = $this->request->get('p', 1);
        $pageSize = $this->request->get('s', 30);
        $offset = ( $currentPage - 1 ) * $pageSize;
        $condition = VproCourses::find()->select(['course_id'])->where(['course_author'=>$author])->orderBy('course_id')->limit(1)->offset($offset)->one();
        $res = VproCourses::find()
            ->select([
                'vpro_courses.course_id',
                'vpro_courses.course_title',
                'vpro_courses.course_pid',
                'vpro_courses.course_cover',
                'vpro_courses.course_time',
                'vpro_courses.course_status',
                'vpro_courses.course_price',
                'vpro_courses.course_discount_price',
                'cc.*',
                'va.auth_id',
                'va.auth_appid',
                'va.auth_roles_id',
                'vd.course_content'
            ])
            ->joinWith('vproCoursesCover cc')
            ->joinWith('vproAuth va')
            ->joinWith('vproCoursesContent vd')
            ->where(['vpro_courses.course_author'=>intval($author)])->andWhere(['>=', 'vpro_courses.course_id', $condition->course_id])
            ->limit($pageSize)
            ->orderBy('vpro_courses.course_time desc')
//            ->createCommand()->getRawSql();
//        var_export($res);
//        exit();
            ->asArray()
            ->all();
        $navs = $this->getCourseNavbar();

        $courses = array_map(function($v){
            unset($v['vproAuth']);
            unset($v['vproCoursesCover']);
            unset($v['vproCoursesContent']);
            $nav_arr = $this->iterNavs($v['course_pid'], $this->getCourseNavbar());
//            $v['course_nav_path'] =
            krsort($nav_arr);
            $v['nav_path'] = implode(' -> ',array_map(function($v){
                return $v['nav_text'];
            }, $nav_arr));
            $v['nav_ids'] = implode(' -> ', array_map(function($v){
                return $v['nav_id'];
            }, $nav_arr));
            return $v;
        }, $res);
        $res=[
            'code' => $this->params['RETURN_SUCCESS'],
            'coursesList' => $courses,
        ];
        return $res;
    }
    public function actionGetCoursesCount(){
        $author = $this->request->get('author', 3);
        $res = VproCourses::find()->select(['count(course_id) as sum'])->where(['course_author'=>$author])->count();
        return [
            'code'=>$this->params['RETURN_SUCCESS'],
            'coursesTotal'=>$res
        ];
    }
    public function actionGetNavbar() {
        return [
            'code' => $this->params['RETURN_SUCCESS'],
            'data' => $this->getCourseNavbar()
        ];
    }
    private function getCourseNavbar(){
        return json_decode($this->redis->get('VproNavbar'));
    }

    /**
     * 迭代导航树
     * 先进入最深处，寻找树杈，找到id直接break；
     * 退到上一级树根，把根塞进去，然后一路break；
     * 最后就到了最初的树根，结束
     *
     * @param $nav_id
     * @param $navs
     * @param array $res
     * @return array
     */
    private function iterNavs($nav_id, $navs, $res=[]){
        foreach($navs as $v){
            if(count($res)==0 && isset($v->children)){
                $res = $this->iterNavs($nav_id, $v->children, $res);
            }
            if(count($res)>0){
                array_push($res, ['nav_id'=>$v->nav_id, 'nav_text'=>$v->nav_text]);
                break;
            }
            if($v->nav_id == $nav_id){
                array_push($res, ['nav_id'=>$v->nav_id, 'nav_text'=>$v->nav_text]);
                break;
            }
        }
        return $res;
    }
    public function actionLoadCourseDetail(){
        $course_id = $this->request->get('c_id', false);
        $lessons = VproCoursesLessonList::findAll(['lesson_course_id' => $course_id]);
        var_export($lessons);
    }

    //添加或修改
    public function actionChapterChange() {
        $data = $this->request->post('chapterData', false);
        $type = $this->request->post('type', false);
        if (!$data || $type === false) return $this->returnInfo('chapterData missing', 'INFO_MISS');
        $entry = $type == 1 ? 'addChapter' : 'modifyChapter';
        $lesson_id = $this->$entry($data);
        return $this->returnInfo($lesson_id);

    }
    private function addChapter($data) {
        $lessonsList = new VproCoursesLessonList();
        $lessonsList->lesson_lid = $data['lesson_lid'];
        $lessonsList->lesson_title = $data['lesson_title'];
        $lessonsList->lesson_course_id = $data['lesson_course_id'];
        $lessonsList->lesson_pid = $data['lesson_course_pid'];
        $lessonsList->lesson_is_chapter_head = 1;
        $lessonsList->save();
        return $lessonsList->lesson_id;
    }
    private function modifyChapter($data) {
        $chapter = VproCoursesLessonList::findOne(['lesson_id' => $data['lesson_id']]);
        $chapter->lesson_title = $data['lesson_title'];
        $chapter->save();
        return $chapter->lesson_id;
    }
    function actionSetCover() {
        $course_id = $this->request->post('course_id', false);
        $course_cover_key = $this->request->post('course_cover_key', false);
        $course_cover_address = $this->request->post('course_cover_address', false);
        $type = $this->request->post('type', false);
        if (!$course_id || !$course_cover_key || !$course_cover_address || $type === false) return $this->returnInfo('course cover missing', 'INFO_MISS');
        if ($type == 1) {
            $cover = new VproCoursesCover();
        } else {
            $cover = VproCoursesCover::findOne(['course_cover_id' => $course_id]);
        }
        $cover->course_cover_id = $course_id;
        $cover->course_cover_key = $course_cover_key;
        $cover->course_cover_address = $course_cover_address;
        $cover->course_cover_uptime = time();
        $cover->course_cover_isuploaded = 1;
        $cover->save();
        return $this->returnInfo($cover->course_cover_id);
    }
    function actionUpdateCourseData() {
        $body = $this->checkParams(['courseData'], 'post');
        $body = $body['courseData'];
        $vpro_courses_data = [];
        if(!isset($body['course_id']))return $this->returnInfo('course id missing', 'INFO_MISS');
        $vpro_courses_data['course_id'] = $body['course_id'];
        $transaction = $this->db->beginTransaction();
        try {
            foreach($body as $key => $value) {
                if($key === 'course_title') {
                    $vpro_courses_data['course_title'] = $body['course_title'];
                }
                if($key === 'course_price') {
                    $vpro_courses_data['course_price'] = $body['course_price']['price'];
                    $vpro_courses_data['course_discount_price'] = $body['course_price']['discount_price'];
                }

                if($key === 'course_content') {
                    $detail_data[$key] = $value;
                    $detail_data['course_id'] = $body['course_id'];
                    $course_id = $this->setVproCoursesContentValues($detail_data);
                }
                if($key === 'nav_id') {
                    $affected = $this->setListValues($value, $vpro_courses_data['course_id']);
                }
            }
            if(count($vpro_courses_data)) {
                $course_id = $this->setVproCoursesValues($vpro_courses_data);
            }
            $transaction->commit();
            return $this->returnInfo('1');
        } catch (Exception $e) {
            $transaction->rollback();
            return $this->returnInfo('DATABASE INSERT ERROR', 'DATEBASE_INSERT_ERROR');
        }
    }
    private function setVproCoursesValues($vpro_courses_data) {
        $course = VproCourses::findOne(['course_id' => $vpro_courses_data['course_id']]);
        foreach($vpro_courses_data as $key => $value) {
            if ($key === 'course_id')continue;
            $course->$key = $value;
        }
        $course->save();
        return $course->course_id;
    }

    /**
     * 查找详细信息, 有就更新，没有就新建
     * @param $detail_data
     * @return mixed
     */
    private function setVproCoursesContentValues($detail_data) {
        $detail = VproCoursesContent::findOne(['course_id' => $detail_data['course_id']]);
        if($detail !== null) {
            foreach($detail_data as $key => $value) {
                if ($key === 'course_id')continue;
                $detail->$key = $value;
            }
        } else {
            $detail = new VproCoursesContent();
            $detail->course_id = $detail_data['course_id'];
            $detail->course_content = $detail_data['course_content'];
            $detail->save();
        }
        $detail->save();
        return $detail->detail_id;
    }
    private function setListValues($nav_id, $course_id) {
//        VproCoursesLessonList::updateAll(['lesson_pid' => $nav_id], ['and', 'lesson_lid'])
        $course = VproCourses::findOne(['course_id' => $course_id]);
        $course->course_pid = $nav_id;
        $course->save();
        if (VproCoursesLessonList::find()->where(['lesson_course_id' => $course_id, 'lesson_is_chapter_head' => '1'])->count()) {
            $affected = VproCoursesLessonList::updateAll(['lesson_pid' => $nav_id], ['and', 'lesson_is_chapter_head=1', 'lesson_course_id='.$course_id]);
        } else {
            $affected = VproCoursesLessonList::updateAll(['lesson_pid' => $nav_id], ['lesson_course_id' => $course_id]);
        }
        return $affected;
    }
}
