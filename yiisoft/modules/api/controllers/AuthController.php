<?php

/**
 * Created by PhpStorm.
 * User: SZL4ZSY
 * Date: 1/3/2018
 * Time: 3:45 PM
 */
namespace api\controllers;

use api\models\VproAuth;
use app\common\Common;
use app\common\JwtAuth;
use app\controllers\BaseController;
use app\models\ModelFactory;
use app\models\VproAuthTable;

class AuthController extends BaseController{
    public $modelClass = 'api\models\VproAuth';
    private $request;
    private $params;
    function init() {
        $this->request = \Yii::$app->request;
        $this->params = \Yii::$app->params;
    }
    function behaviors(){
        $behaviors=parent::behaviors();
        $behaviors['authenticator']=[
            'class'=>JwtAuth::className(),
            /*
             *因为此post请求的 content-type不是one of the “application/x-www-form-urlencoded, multipart/form-data, or text/plain”, 所以Preflighted requests被发起。
             * “preflighted” requests first send an HTTP OPTIONS request header to the resource on the other domain, in order to determine whether the actual request is safe to send.
             * 然后得到服务器response许可之后，再发起其post请求。
             */
            'except'=>['index', 'create', 'options', 'info', 'user-list']
        ];
        return $behaviors;
    }
    public function actions()
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['index'], $actions['create']);
        $actions['create']=[
            'class'=>'api\myactions\AuthAction',
            'modelClass'=>$this->modelClass
        ];
        return $actions;
    }
    public function actionIndex() {

//        Common::testToken();

        return Common::verifyToken('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjExMTExMTEifQ.eyJpc3MiOiJtYXJrIiwiYXVkIjoiemh1Iiwic3ViIjoiZXZlcnlvbmUiLCJleHAiOjE1Mjk1NzQ5MDAsImlhdCI6MTUyOTU3MTMwMCwianRpIjoiMTExMTExMSIsImF1dGhfaWQiOiIxIiwiYXV0aF9hcHBpZCI6Im1hcmsifQ.KpiwoQE0_MdormcGVnSh5FIYCBGIcrJ2tghxRMV1xYo');
    }
    public function actionOptions(){
        \Yii::$app->getResponse()->setStatusCode(204);
    }

    /**
     * 取得用户信息
     * @return array
     */
    public function actionInfo(){
        $token = $this->request->get('token', '');
        if($token === '')return ['code' => $this->params['USER_TOKEN_ILLEGAL'], 'data' => 'token is null'];
        $vpro_auth = new VproAuth();
        $user_info = $vpro_auth::findOne(['auth_token' => $token]);
        if (!$user_info)return ['code' => $this->params['USER_TOKEN_NOT_FOUND'], 'data' => 'user token could not found'];
        if (!Common::verifyToken($token)) return ['code' => $this->params['USER_TOKEN_EXPIRED'], 'data' => 'user token expired'];
        return ['data'=>['roles'=>[$user_info->roles_name], 'name'=>$user_info->auth_appid, 'avatar'=>'123', 'id'=>$user_info->auth_id], 'code'=>20000];
    }
    public function actionLogout(){
        $request=\Yii::$app->request;
        $vpro_auth = new VproAuth();
        $vpro_auth->auth_token='';
        return [
            'code'=>20000
        ];
    }
    public function actionUserList(){
        $request = \Yii::$app->request;
        if(!$request->isGet){
            return [];
        }
        $currentPage = $request->get('p', 1);
        $pageSize = $request->get('s', 30);
        $offset = ( $currentPage - 1 ) * $pageSize;
        $sql = <<<sql
SELECT
	info.*, pe.permissions_name AS permission_subname
from 
	(
	SELECT
	area.*,
	rp.permissions_id,
	p.permissions_name
	FROM
		(
			SELECT
				a.auth_id,
				a.auth_appid,
				r.roles_id,
				r.roles_name
			FROM
				vpro_auth AS a
			LEFT JOIN vpro_roles AS r ON a.auth_roles_id = r.roles_id
			WHERE
				auth_id >= (
					SELECT
						auth_id
					FROM
						vpro_auth
					ORDER BY
						auth_id ASC
					LIMIT 1 OFFSET :offset
				)
			LIMIT :limit
		) AS area
	LEFT JOIN vpro_roles_permissions AS rp ON area.roles_id = rp.roles_id
	LEFT JOIN vpro_permissions as p ON p.permissions_id = rp.permissions_id
) as info 
left JOIN vpro_permissions AS pe ON info.permissions_id = pe.permissions_pid
order by auth_id
sql;
        $db = \Yii::$app->db;
        $users_res = $db->createCommand($sql)->bindValues(['limit'=>intval($pageSize), 'offset'=>$offset])->queryAll();
        $res = [];
        foreach($users_res as $value){
            if(!isset($res[$value['auth_id']])) {
                $res[$value['auth_id']] = [
                    'user_id' => $value['auth_id'],
                    'user_name' => $value['auth_appid'],
                    'user_role' => $value['roles_name'],
                    'user_permissions'=>[]
                ];
            }
            if($value['permissions_name']===null){
                $res[$value['auth_id']]['user_permissions'] = ['read'];
            }else{
                if(!in_array($value['permissions_name'], $res[$value['auth_id']]['user_permissions'])){
                    array_push($res[$value['auth_id']]['user_permissions'], $value['permissions_name']);
                }
                if($value['permissions_subname'] !== null && !in_array($value['permissions_subname'], $res[$value['auth_id']]['user_permissions'])){
                    array_push($res[$value['auth_id']]['user_permissions'], $value['permissions_subname']);
                }
            }
        }
        $ret['code'] = 20000;
        $ret['data']['items'] = $res;
        $ret['data']['user_sum'] = $this->userListCount();
        $ret['data']['user_roles'] = $this->userAuthority();
        return $ret;
    }
    public function userListCount(){
        $sql = <<<sql
SELECT
	count(auth_id) AS user_sum
FROM
	vpro_auth
sql;
        $db = \Yii::$app->db;
        $res = $db->createCommand($sql)->queryOne();
        return $res['user_sum'];
    }
    public function userAuthority(){
        $vpro_roles = ModelFactory::loadModel('vpro_roles');
        $res = $vpro_roles::find()->all();
        return $res;
    }
    public function getCourseNav(){

    }
    public function getAuth()
    {

    }
}