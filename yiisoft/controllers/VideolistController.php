<?php
/**
 * Created by PhpStorm.
 * User: szl4zsy
 * Date: 3/28/2017
 * Time: 3:53 PM
 */
namespace app\controllers;
use app\models\ModelFactory;
use app\models\Videoauth;
use Yii;
use app\models\Videolist;
use Qiniu\QiniuUtil;
use yii\base\Exception;
use yii\filters\auth\QueryParamAuth;
use yii\web\UnauthorizedHttpException;

class VideolistController extends BaseController
{
    public $modelClass='app\models\Videolist';
    public function init(){
        parent::init();
//        throw new UnauthorizedHttpException('token mismatch');
    }
    public function behaviors()
    {
        //有了这个就需要get参数验证，验证方法定义在web.php中，identityClass, findIdentityByAccessToken验证token是否存在
        $behaviors=parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['authenticator']= array(
            'class'=>QueryParamAuth::className(),
            'tokenParam'=>'token'
        );
        return $behaviors;
    }
    public function actions()
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['index']);
        return $actions;
    }
    public function actionIndex(){
        $videoList=new Videolist();
//        return $videoList::find()->joinWith(['videosImg','videosFiles'])->asArray()->all();
        return $videoList::find()->where(['video_author'=>Videoauth::$current_user_id])->joinWith(['videosImg','videosFiles'])->asArray()->all();
    }
    public function _deleteLocalImg($key){
        if($key!=''){
            if(!unlink('./videos/images/'.$key)){
                throw new Exception('文件无法删除或不存在！');
            }
        }
    }
    public function actionDeletefile(){
        $postData=Yii::$app->request->post();
        if(is_array($postData)){
            $util=new QiniuUtil();
            $db=Yii::$app->db;
            $transaction=$db->beginTransaction();
            try{
                foreach($postData['key'] as $k => $v){
                    foreach($v as $key => $value){
                        if(!preg_match("/\_id/",$key)){
                            $util->deleteFile($value);
                            if(preg_match("/^img/",$key)){
                                $this->_deleteLocalImg($value);
                            }
                        }else{
                            $db->createCommand('delete from '.$k.' where '.$key.' = '.$value)->execute();
                        }
                    }
                }
                $transaction->commit();
                $res=new \stdClass();
                $res->error=null;
                return $res;
            }catch(Exception $e){
                $transaction->rollBack();
                $res=new \stdClass();
                $res->error=$e->getMessage();
                return $res;
            }
        }
    }

}