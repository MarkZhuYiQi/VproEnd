<?php
/**
 * Created by PhpStorm.
 * User: SZL4ZSY
 * Date: 2/3/2017
 * Time: 9:59 AM
 */
namespace app\controllers;

use Yii;
use yii\rest\ActiveController;
use app\models\Blog;
use app\models\BlogClass;
use yii\web\Response;
use yii\filters\auth\HttpBasicAuth;

class UserController extends ActiveController
{
    public $modelClass='app\models\BlogUser';
    public function behaviors(){
        $behaviors=parent::behaviors();
        //该选项决定返回给用户的是xml还是json
        $behaviors['contentNegotiator']['formats']['text/html'] = Response::FORMAT_JSON;
        $behaviors['authenticator']=[
            'class'=>HttpBasicAuth::className(),
            ];
        return $behaviors;
    }

    public function actions()
    {
        $actions=parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['delete'],$actions['index']);
        return $actions;
    }
    public function actionIndex(){
        echo 111;
    }
    public function fields(){
        $fields=parent::fields();

    }
    public function init(){
        $this->enableCsrfValidation=false;
    }
    public function actionDo(){
        //请求处理->响应
        Yii::$app->response->format=Response::FORMAT_JSON;
        $arr=['name'=>'mark','age'=>18];
//        echo json_encode($arr);
        return $arr;
    }
    public function actionTest(){
        return Yii::$app->request->csrfToken;
    }
    public function actionMed(){
        return Yii::$app->request->getMethod();
//        return Yii::$app->request->method;
    }
    public function actionGainVar(){
//        Yii::$app->response->format=\Yii\web\Response::FORMAT_JSON;
        $data=Yii::$app->request;
        switch($request=$data->getMethod()){
            case 'POST':
//                return $data->post();
                return $data->post('id',0);
            case 'GET':
                return $data->get('id',0);
            default:
                return 'failed';
        }
    }
    public function actionDbConn(){
        $request=Yii::$app->request;
//        $params=[':test_id'=>$request->get('id','-1'),':test_name'=>$request->get('name','null')];
        $db=Yii::$app->db;
        $db->transaction(function($db){
            $db->createCommand('insert into {{%test}} values(99,"zhuyiqi")')->execute();
            $db->createCommand()->update('blog_test',['test_name'=>'66666'],'test_id=99')->execute();
        });
        //等同于上面的代码，但是下面的代码可以针对错误做更多处理
        $transaction=$db->beginTransaction();
        try{
            $db->createCommand('insert into {{%test}} values(99,"zhuyiqi")')->execute();
            $db->createCommand()->update('blog_test',['test_name'=>'66666'],'test_id=99')->execute();
            $transaction->commit();
        }catch(\Exception $e){
            $transaction->rollBack();
//            return 'failed';
            throw $e;
        }
    }
    public function actionAr(){
        $blog=new Blog();
        //该方法可以将blog所有内容按数组形式传出来
//        $query=$blog::find()->asArray()->all();
        //关联查询blog_class表中的数据，根据blog.php中的getter关联
//        $query=$blog::find()->joinWith('blogClass')->asArray()->all();
        //查看原始sql
//        $query=$blog::find()->joinWith('blogClass')->createCommand()->getSql();
        //找出blog_class中id为1的条目，并将该条目中的class_title拿出来
        $query=BlogClass::findOne(1)->class_title;
        //找出blog_class中id为1的条目，并根据关联方法，找到对应blog集合中第一个的detail_id
        $query=BlogClass::findOne(1)->blog[0]->detail_id;
        var_export($query);
    }
}