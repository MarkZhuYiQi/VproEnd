<?php
namespace app\controllers;
use yii\filters\Cors;
use yii\helpers\ArrayHelper;
use yii\rest\ActiveController;
use yii\web\Response;
//restfulAPI用的上级类，主要规定返回格式，排坑，允许跨域请求。
class BaseController extends ActiveController
{
    function init()
    {
        require "./../Qiniu/functions.php";
        parent::init(); // TODO: Change the autogenerated stub
        \Yii::$app->user->enableSession=false;
        $this->enableCsrfValidation=false;
/*        // 授权许可源地址，如果源地址不在该项目类中，则会报错无法访问
        header("Access-Control-Allow-Origin:http://127.0.0.1:9528");
        // 授权许可的请求方法，如果不在其中就会拒绝
        header("Access-Control-Allow-Methods:GET,POST,PUT,DELETE,HEAD,OPTIONS");
        // 授权许可的请求头，如果不在其中会报错
        header("Access-Control-Allow-Headers:X-Requested-With,Content-Type,If-Modified-Since");*/
    }
    function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['contentNegotiator']['formats']['text/html']=Response::FORMAT_JSON;
        $behaviors=ArrayHelper::merge($behaviors,[
            [
                'class'=>Cors::className(),
                'cors'=>[
                    'Origin' => ['*'],//定义允许来源的数组
                    'Access-Control-Request-Method' => ['GET','POST','PUT','DELETE','HEAD','OPTIONS'],//允许动作的数组
                    'Access-Control-Request-Headers' => ['x-requested-with','content-type','if-modified-since', 'X-Token'],
                ]
            ]
        ]);
        return $behaviors;
    }
    //官方文档关于cors的说明
    /*    public function behaviors()
        {
            $behaviors = parent::behaviors();

            // remove authentication filter
            $auth = $behaviors['authenticator'];
            unset($behaviors['authenticator']);

            // add CORS filter
            $behaviors['corsFilter'] = [
                'class' => Cors::className(),
                'cors'=>[
                    'Origin' => ['*'],//定义允许来源的数组
                    'Access-Control-Request-Method' => ['GET','POST','PUT','DELETE','HEAD','OPTIONS'],//允许动作的数组
                    'Access-Control-Request-Headers' => ['*'],
                    'Access-Control-Max-Age' => 86400,
                ]
            ];
            $behaviors['contentNegotiator']['formats']['text/html']=Response::FORMAT_JSON;
            // re-add authentication filter
            $behaviors['authenticator'] = $auth;
            // avoid authentication on CORS-pre-flight requests (HTTP OPTIONS method)
            $behaviors['authenticator']['except'] = ['options'];

            return $behaviors;
        }*/
    /**
     * @property $code | Int, http 错误码
     * @property $message | String, 错误的具体信息
     * @property $file | string, 发生错误的文件
     * @property $line | Int, 发生错误所在文件的代码行
     * @property $created_at | Int, 发生错误的执行时间戳
     * @property $ip | string, 访问人的ip
     * @property $name | string, 错误的名字
     * @property $trace_string | string, 错误的追踪信息
     * @return 返回错误存储到mongodb的id，作为前端显示的错误编码
     * 该函数从errorHandler得到错误信息，然后保存到mongodb中。
     */
    public function saveByErrorHandler(
        $code, $message, $file, $line, $created_at,
        $ip, $name, $trace_string, $url, $req_info=[]
    ){
        $category = \Yii::$app->params['AppName'];
        $model = new $this->_errorHandlerModelName();
        $model->category     = $category;
        $model->code         = $code;
        $model->message      = $message;
        $model->file         = $file;
        $model->line         = $line;
        $model->created_at   = $created_at;
        $model->ip           = $ip;
        $model->name         = $name;
        $model->url          = $url;
        $model->request_info = $req_info;
        $model->trace_string = $trace_string;
        $model->save();
        return (string)$model[$this->getPrimaryKey()];

    }
    public function getPrimaryKey(){
        return '123';
    }
}