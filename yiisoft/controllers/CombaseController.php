<?php
namespace app\controllers;
use Yii;
use yii\filters\auth\QueryParamAuth;
use yii\filters\Cors;
use yii\helpers\ArrayHelper;
use yii\web\Controller;

class CombaseController extends Controller
{
    protected $redis;
    protected $params;
    function init()
    {
        require "./../Qiniu/functions.php";
        parent::init(); // TODO: Change the autogenerated stub
        Yii::$app->user->enableSession=false;
        $this->enableCsrfValidation=false;
//        $this->redis = Yii::$app->get('redis');
        $this->redis = RedisController::connect();
        $this->params = \Yii::$app->params;
//        header("Access-Control-Allow-Origin:http://127.0.0.1:8080");
//        header("Access-Control-Allow-Methods:GET,POST,PUT,DELETE,HEAD,OPTIONS");
//        header("Access-Control-Allow-Headers:Origin,X-Requested-With,Access-Control-Allow-Origin,Content-Type,If-Modified-Since");
    }
    function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors=ArrayHelper::merge($behaviors,[
            [
                'class'=>Cors::className(),
                'cors'=>[
//                    'Origin' => ['http://localhost:8080','http://127.0.0.1:8080'],//定义允许来源的数组
                    'Origin' => ['http://localhost:9528','http://127.0.0.1:9528','http://localhost:8080','http://127.0.0.1:8080'],//定义允许来源的数组
                    'Access-Control-Request-Method' => ['GET','POST','PUT','DELETE', 'HEAD', 'OPTIONS'],//允许动作的数组
                    'Access-Control-Request-Headers' => ['x-requested-with','content-type','if-modified-since', 'X-Token','Authorization'],
                    // Allow only headers 'X-Wsse'
//                    'Access-Control-Allow-Credentials' => true,
                    // Allow OPTIONS caching
//                    'Access-Control-Max-Age' => 3600,
                    // Allow the X-Pagination-Current-Page header to be exposed to the browser.
//                    'Access-Control-Expose-Headers' => ['X-Pagination-Current-Page'],
                ]
            ]
        ]);
        return $behaviors;
    }
    function returnInfo($data, $return_status='RETURN_SUCCESS') {
        return [
            'code' => $this->params[$return_status],
            'data' => $data
        ];
    }
    function checkParams($keys, $method) {
        $body = [];
        foreach($keys as $k) {
            $body[$k] = $this->request->$method($k, false);
            if ($body[$k] !== 0 && !$body[$k]) {
                return false;
            }
        }
        return $body;
    }
    protected $_errorHandlerModelName;
    /**
     * @property $code | Int, http 错误码
     * @property $message | String, 错误的具体信息
     * @property $file | string, 发生错误的文件
     * @property $line | Int, 发生错误所在文件的代码行
     * @property $created_at | Int, 发生错误的执行时间戳
     * @property $ip | string, 访问人的ip
     * @property $name | string, 错误的名字
     * @property $trace_string | string, 错误的追踪信息
     * @return 返回错误存储到mongodb的id，作为前端显示的错误编码
     * 该函数从errorHandler得到错误信息，然后保存到mongodb中。
     */
    public function saveByErrorHandler(
        $code, $message, $file, $line, $created_at,
        $ip, $name, $trace_string, $url, $req_info=[]
    ){
        $category = \Yii::$app->params['AppName'];
        $model = new $this->_errorHandlerModelName();
        $model->category     = $category;
        $model->code         = $code;
        $model->message      = $message;
        $model->file         = $file;
        $model->line         = $line;
        $model->created_at   = $created_at;
        $model->ip           = $ip;
        $model->name         = $name;
        $model->url          = $url;
        $model->request_info = $req_info;
        $model->trace_string = $trace_string;
        $model->save();
        return (string)$model[$this->getPrimaryKey()];

    }
    public function getPrimaryKey(){
        return '123';
    }


    //超时时间存放key时的后缀
    const EXPIRED_KEY_SUFFIX = '_expired';

    /**
     * 过期时间，默认传入时间是分钟
     * @param int $min
     * @param int $max
     * @return int
     */
    protected function expired_time($min=0, $max=0){
        return time() + rand($min*3600, $max*3600);
    }

    /**
     * 判断key是否存在
     * @param $key
     * @param bool $database
     * @return bool
     */
    public function checkRedisKey($key, $database=false){
        if(!$database){
            return $this->redis->exists($key);
        }else{
            return $this->redis->exists($database) && $this->redis->hExists($database, $key);
        }
    }

    /**
     * 判断key是否过期, 过期返回false，可以使用返回true
     * @param $key
     * @param bool $database
     * @return bool
     */
    public function checkExpired($key, $database=false){
        if(!$database){
            return $this->redis->ttl($key.self::EXPIRED_KEY_SUFFIX) < time();
        }else{
            return $this->redis->hGet($database.self::EXPIRED_KEY_SUFFIX, $key) < time();
        }
    }

    /**
     * hash表设置键值对带上过期功能
     * @param $database
     * @param $key
     * @param $expire_time
     * @param $value
     */
    public function hsetex($database, $key, $expire_time, $value){
        $this->redis->hSet($database, $key, $value);
        $this->redis->hSet($database.self::EXPIRED_KEY_SUFFIX, $key, time()+$expire_time);
    }

    /**
     * 获得带过期时间的哈希表键值对
     * @param $database
     * @param $key
     * @return bool
     */
    public function hgetex($database, $key){
        $expired_time = $this->redis->hGet($database.self::EXPIRED_KEY_SUFFIX, $key);
        if(time() < $expired_time && $this->checkRedisKey($key, $database)){
            return $this->redis->hGet($database, $key);
        }
        $this->redis->hSet($database, $key, '');
        return false;
    }
}